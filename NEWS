v0.6

    + The Lua interface has been modularized, replacing the previous
      single global Lua namespace with various "snogray.xxx" modules.

      The documentation for this has yet to be written, so look at
      example scene files for usage hints.

      The modules include "snogray.coord", "snogray.color",
      "snogray.texture", "snogray.material", "snogray.surface",
      "snogray.light", "snogray.transform", "snogray.image",
      "snogray.scene", "snogray.camera", "snogray.environ",
      "snogray.sys", "snogray.render", etc (many of these are not
      particularly useful for scene definitions though).

      By default, scene-files start with a set of pre-initialized module
      variables, for "coord", "light", "material", "surface", "texture",
      and "transform" (i.e., for each module "xxx", a Lua code snippet
      like "xxx = require 'snogray.xxx'" is executed), and definitions
      for the functions "pos" and "vec".

      The old-style scene-definition interface can be enabled by putting
      "snogray_old_style_scene_file ()" at the beginning of a Lua
      scene-definition file.

    + The "snogdiff" utility program now prints an image-comparison
      summary to stdout if the input images were different, and if no
      output is given on the command-line, no output image is produced.
      This makes snogdiff useful just to compare images for equality.

      The new snogdiff options -d/--delta and -m/--mse options allow the
      threshold where images are considered identical to be specified
      (by default, any difference at all is considered "non-identical").
      The new -q/--quiet option controls whether any summary is printed.

    + The new snoghilite option -u/--upper-portion-only only scales the
      upper portion of the image (useful for some environment maps).

    + The new snogray options --preload, --postload, --pre-eval, and
      --post-eval can be used to load additional files or evaluate Lua
      code before/after the main scene file.

    + The new snogray --build-info option will print some information
      about how snogray was built.

    + The --preclamp=THRESH option has been added to the snogray
      utility programs snogcvt, snogdiff, etc -- but notably, not
      snogray itself.

    + Filenames in scene-files are now interpreted relative to the
      directory of the referencing file.

    + The new snogray rendering-option (specified with the
      -R/--render-options command-line option) "per_pixel_random_seeds"
      re-seeds the random number generator for each pixel, using the
      pixel location.  This makes it easier to get consistent results
      across runs (at some possible cost in quality), which is useful
      for debugging.

    + Snogray "uninstalled mode" (running snogray out of the build tree
      rather than from an installed location) has been improved.

      Uninstalled mode now works when the current directory isn't the
      snogray source directory, by looking at the directory of argv[0].

      Also, it now uses uninstalled mode if argv[0] refers to a snogray
      source-tree, even if there's also an installed version of snogray
      present (it used to always use an installed snogray if found).

    + Most documentation files are now in the subdirectory "doc/".

    + The source-tree layout has been considerably cleaned up, with all
      source files moved into subdirectories for various different
      features (previous versions had a completely flat source-tree
      layout!).

    + The "driver" level of the program is now  written in Lua,
      calling into C++ code to do most of the work.

    + The image-filter parameter (e.g. used in the -F option) for the
      half-width of the filter has been renamed to "radius", from "width."

    + The "snogimg" utility program now has --help and --version options.

    + "Coordinate" textures in Lua ("texture.x" etc) are now simple
      values rather than functions.

    + New Lua "snogray.vector" module is an interface to raw C++
      float/int/unsigned vectors that can be passed to some primitives
      instead of Lua tables.
    
      It is slightly faster than a Lua table, but more importantly, uses
      much less memory and is cheaper to pass to C++ functions that
      already take a std::vector argument.

    + Lights may now be stored in surface-groups.

    + Meshes now support multiple materials (the various internal mesh
      creation interfaces have changed to support this, but have not
      been finalized).

    + Increase default minimum trace-length when using double coordinates.
      The previous default value resulted in  artifacts during rendering.

    + The new Surface::Renderable class now contains the
      surface-rendering interface (previously this interface was just
      part of the Surface class, which remains for use in scene
      definition).

    + The new Light::Sampler class now contains the light-rendering
      interface (previously this interface was just part of the Light
      class, which remains for use in scene definition).

    + Octree improvements:  
      + Searching is now done using "ray parametric form", instead of in
        terms of absolute positions; this is both more efficient and
        simpler.
      + Search order now reflects the origin of the search ray, which in
        some cases results in faster pruning of the search space.
      + Reduce memory usage of Octree significantly by using offsets
        instead of pointers when possible.  This helps when rendering
        extremely large scenes, and also speeds up rendering generally
        (probably due to better cache usage).
      + The memory layout used for octrees has been changed to better
        reflect rendering usage, resulting in runtime speedups.
      + The Octree code has also been cleaned up and re-arranged a fair
        bit, with all build-time methods moved into Octree::Builder
        class.

    + SWIG "disown" support (in SWIG 1.3.35 and later) is now required.

    + LPeg updated to version 0.11.

    + RPly updated to version 1.1.3.

    + Compatibility with Lua versions up to 5.3.

    + Use of the C++ "extern template" feature is disabled by default,
      because of bugs in gcc 4.9.  It may be enabled when running
      configure, using the configure "--enable-extern-template" option.
      [Note that the benefit of using "extern template" is fairly small
      with modern compilers.]

    + Many bug fixes and code cleanups.


v0.5.3

    + Portability fixes.


v0.5.2

    + Snogray will now be automatically compiled using link-time
      optimization, if the compiler seems to support the (gcc-style)
      "-flto" option.

    + Various minor bug fixes and tweaks.


v0.5.1

    + Snogray can now be properly installed!  Files referenced in
      scenes are still interpreted relative to the current directory
      (which should eventually change), but snogray can find its own
      support files in the installed location.

    + A new utility program "snoghilite" copies an input image to an
      output image, with all highlights scaled by a constant factor.
      A "highlight" is any area of the image whose intensity exceeds a
      given threshold.

      This is particularly useful for turning a low-dynamic-range
      environment-map into a HDR (high-dynamic-range) environment-map
      usable (although obviously not accurate) for scene lighting.

    + Snogray command-line syntax is slightly different:
      - Only one scene-file may be specified.
      - The output file is now optional, if the scene-file specifies
	an output file itself.

    + Various bug fixes and code improvements.


v0.5

    + A new file "README.utils" documents the various utility programs.

    + A new file "README.issues" discusses various usage issues.

    + A new utility program "snogbloom" adds "veiling glare" to an HDR
      input image.  Normally this is used when converting to a LDR
      output format (snogbloom itself can do the conversion), and can
      make LDR images with very bright areas look much more realistic.

    + snogcvt now supports good-quality upscaling.

    + snogcvt, snogdiff, and snogbloom now use "output preclamping"
      when converting to a LDR image format, which can improve the
      anti-aliasing of very bright areas of an HDR input image.  This
      feature may be disabled using the new "--no-preclamp" option.

      [The snogray program itself does _not_ use preclamping, and thus
      anti-aliasing of very bright areas may be sub-optimal.  See the
      "ANTI-ALIASING OF BRIGHT AREAS" section in the "README.issues"
      file for methods to deal with this.]

    + The snogray -a/--oversample option renamed to "-n" / "--samples".

    + The snogray -n/--direct-samples option renamed to
      "-D" / "--direct-samples".

    + A new snogray option, "-B" / "--background-orientation", allows
      some control over the environment map specified by a
      -b/--background option.  Most usefully, when -B is given an
      angle in degress, the environment will be rotated by that amount
      around the vertical axis.

    + The snogcvt --underlay and -p/--pad options were removed (they
      were not very useful).

    + Writing of TGA (aka Targa) image files is now supported.

    + Lua is now required (and more functionality will be moved into
      Lua in the future).  [A Lua implementation should be included
      with the distribution, so this dependency isn't a problem.]

    + The configure option "--enable-double-coords" (which used to be
      called "--disable-float-coords") now works properly.  When this
      option is given to configure, snogray will use double-precision
      floating-point for coordinates.  This usually isn't necessary,
      but can make a difference in some (rather extreme) cases where
      scene files fail to render properly.

    + Many bug fixes and code improvements.


v0.4

    + Implement material-based surface transparency/translucency.
      Materials that implement this can give arbitrary surfaces an
      additional level of transparency/translucency beyond that due to
      geometry.  This only affects _surfaces_, so it cannot be used to
      implement refraction, but because it operates on a very low
      level, it affects shadow-casting in direct-lighting, etc.,
      making it a very efficient way to add a fine "geometry" to
      surfaces.

      To use this feature, use a "Stencil" ("stencil" in Lua) wrapper
      material; the degree opacity can be a texture, so this can be
      used to implement opacity maps.  In Lua, an "opacity" or "alpha"
      parameter can also be added to a material description instead
      (which just causes a "stencil" wrapper to be automatically used).

    + Make light-emission a material property, rather than requiring
      explicit light objects for area lights.

      To make a surface into an area light give it a "Glow" material
      ("glow" in Lua).  However, currently meshes cannot be used as
      lights.

      Traditional Light objects still exist, for cases where
      light-emission isn't associated with a surface.

    + Implement loading of PBRT format scene files.  Not all PBRT
      features are supported, and sometimes the results may be
      somewhat different (e.g., due to substitution of a different
      material for PBRT material types that we don't implement), but
      many PBRT scene files work pretty well, especially geometry.

    + Implement reading of TGA (aka Targa) image files.

    + Rename the "Plastic" material to "ThinGlass" ("thin_glass" in
      Lua).

    + Use all CPU cores by default.

    + The -h/--height and -w/--width command-line options are removed;
      use -s/--size instead.

    + Automatically use LuaJIT instead of Lua if it's detected.

    + Many bug fixes and code improvements.


v0.3

    + Implement multi-threaded rendering (-j/--threads).

    + Add photo-mapping renderer (-Sphoton).  The quality isn't so
      great, but it's a start.

    + Rewrite the environment-map light (EnvmapLight) to sample the
      environment-map exactly (as well as having cleaner and smaller
      code).  This makes environment-map lighting less noisy (as the
      PDF exactly matches the illumination).

    + Add "sampleimg" utility, which outputs a "dithered" version
      of an input image.


v0.2

    + Rewrite much of the rendering infrastructure to allow more
      flexibility in implementing different rendering methods.
      The -S/--surface-integ option allows choosing different renderers.

    + Add a real path-tracing renderer (-Spath).

    + Add support for better random-number generation, using std::random
      or boost::random if possible.


v0.1

    Original version
