Building Snogray


COMPILATION

   Snogray uses the GNU autotools.  To build it, one must first run
   the "configure" shell script; this produces a "Makefile", which
   allows one to compile snogray by running the "make" program.  If
   there are missing dependencies, the configure script will given an
   error.

   [If this is a development snapshot, there may not be a "configure"
   script.  In such a case the "autogen.sh" script may be run to
   produce the configure script; however, this requires that the GNU
   autotools be installed.]

   Build steps (these commands should be given to a command-line prompt):

   (0) OPTIONAL:  if there is no "configure" script, generate
       "configure" by running autogen.sh:

	  ./autogen.sh

   (1) Run the "configure" script to generate a Makefile:

	  ./configure

   (2) Use make to build snogray:

	  make


DEPENDENCIES

   In step (1) above, the configure script will try to examine your
   system to see what libraries, etc, are available.  There are very
   few libraries which are actually _necessary_ to compile snogray,
   but many are desirable -- e.g., libjpeg (for JPEG format image
   handling), libpng (for PNG format image handling) OpenEXR (for EXR
   format HDR image handling), etc.

   In many cases, the appropriate dependencies are found automatically

   A few specific points:

   * Lua -- Snogray requires Lua (the language).

     A Lua implementation should be included in the snogray
     distribution (in the subdirectory "lua"), so no external library
     is required (although if an external library is present on the
     system, the snogray configuration step will attempt to use it).

     If Lua is _not_ bundled with the distribution (for instance, if
     this is a development snapshot), and there is no system Lua
     library installed, a Lua source-directory may be explicitly
     specified using the configure "--with-lua-src" option.

   * SWIG -- The snogray Lua-C++ interface is automatically generated
     using the "SWIG" interface generator.

     A pre-generated Lua interface should be included with official
     distributions, so SWIG doesn't actually need to be installed for
     normal compilation in those cases.

     However, for building development snapshots (which may not
     include a pre-generated interface), or for doing development on
     the Lua interface, SWIG version 1.3.35 or later is required.

   * Include-file / library paths -- On some systems, include files
     and libraries may located in non-standard locations, and the
     configure file will need some help to find them.  An example is
     FreeBSD and other *BSD systems, where libraries installed via the
     "ports" system are installed in subdirectories of /usr/local,
     which the compiler doesn't search by default.

     To specify alternate places to search for include files and
     libraries, the "CPPFLAGS" and "LDFLAGS" variables may be set on
     the configure command line.  For instance, on FreeBSD, it's often
     desirable to find package installed in /usr/local; to do this,
     invoke configure like:

        ./configure CPPFLAGS='-I/usr/local/include' LDFLAGS='-L/usr/local/lib'

     [This isn't always necessary; for instance, libraries which use
     the "pkg-config" system are found in /usr/local by default.]
