Snogray Usage


Snogray is a command-line program, which reads a scene description
file, and outputs an image file.


 [In the examples below, UPPERCASE is used for "variables",
  representing values to be filled in by the user.  Optional values
  are surrounded by square-brackets, "[" and "]".  Values which may be
  repeated have an ellipsis, "..." appended.]


BASIC USAGE

   Basic usage of snogray is very simple (on the command-line):

     ./snogray [OPTION...] SCENE_FILE OUTPUT_IMAGE_FILE

   SCENE_FILE is the scene to render, usually written in Lua (but
   also, 3ds etc files should work).

   OUTPUT_IMAGE_FILE is the image file snogray will write the output
   image to.  The output image format will be automatically chosen
   based on the file extension of OUTPUT_IMAGE_FILE -- e.g., an
   extension of ".exr" will result in an OpenEXR file, ".jpg" in a
   jpeg fils ".png" for PNG, etc.


COMMAND-LINE OPTIONS

   Snogray understands various command-line options as well.  Invoking
   snogray with the "--help" option will give a list of common options
   (though it's probably a bit of out date).

   Some of the more useful options include:

    -j NUM
    --threads=NUM

        Use NUM threads for rendering; by default, snogray tries to
        use as many threads as there are CPU cores.  This option is
        only available on systems that support multi-threading.

    -C
    --continue

        Normally, if the specified output-image file already exists,
        snogray will refuse to overwrite it, and will exit with an error
        message.

        If you give the -C/--continue option, snogray will instead
        attempt to _continue_ rendering a partially-rendered image, by
        first reading in as much of the output-image file as it can,
        and then continuing rendering at the place where the image
        seems to have been truncated.

        For this to work properly, the same input scene and
        command-line options must be used as were used to write the
        original partially-rendered image!

    --help

       Output a description of the command-line options and exit

    --version

       Output program version and exit

    -s WIDTHxHEIGHT
    --size=WIDTHxHEIGHT
    -s WIDTH
    --size=WIDTH

        Set the output -image size to WIDTH by HEIGHT pixels.

        If the "xHEIGHT" portion of the value is omitted, then WIDTH
        is divided by the default aspect ratio to get the height.

        ["x" is a literal character x, WIDTH and HEIGHT should be
        replaced by numbers; e.g.: --size=640x480 ]

    -n NUM
    --samples=NUM

        Use NUM samples for each output pixel (the default is 1).

        Using more samples makes the output image less noisy, but
        increases run-time.

    -D NUM
    --direct-samples=NUM

        Use NUM samples for direct lighting.  Using more samples can
        sometimes reduce noise in situations where direct lighting is
        important (but often it's better to increase the number of
        samples per pixel using -n/--samples).  The default depends on
        the surface-integrator used.

    -S INTEG
    --surface-integ=INTEG

        Use surface-integrator INTEG.  A "surface integrator" is the
        basic rendering algorithm used; which one is used can
        dramatically effect the quality and look of the output image.

        Implemented surface-integrators include:

           "direct"

                A "direct lighting only" surface-integrator.

                This surface-integrator is the closest to the classic
                ray-tracing algorithm.

                It is relatively fast, but only uses light falling
                directly on surfaces from lights, and ignores any
                indirect ("global") lighting.  It will also
                recursively handle perfectly specular surfaces such as
                glass or mirrors for primary (eye) rays, but not for
                lighting.

           "path"

                 A "path tracing" surface-integrator.

                 Path tracing is a simple algorithm that properly
                 implements global illumination in the general case.

                 However, it is very slow and usually gives noisy
                 results.  The amount of noise may be reduced by
                 increasing the number of samples used (with the
                 -n/--samples command-line option), but it takes a
                 _lot_ of samples to achieve a noise-free image.

                 [The number of samples required varies depending on
                 the details of the lighting in the scene; 16 samples
                 may be enough for a good rough image, but 40000
                 samples may be required for a noise-free one!]

    -b ENV_MAP_IMAGE_FILE
    --background=ENV_MAP_IMAGE_FILE

        Use ENV_MAP_IMAGE_FILE as an environment map, i.e., as the
        scene background.  ENV_MAP_IMAGE_FILE should be an image file
        in "latitude-longitude" format (covering a full 360 degree
        sphere).  ENV_MAP_IMAGE_FILE is used for both background and
        lighting, so light will come "from" the background image.  For
        this reason it is best if it is an HDR (high-dynamic range)
        image, e.g., with an .exr or .hdr extension.

    -e EXPOSURE
    --exposure=EXPOSURE

        Modify the brightness/contrast of the output image.

        EXPOSURE can have one of the following forms:

           +STOPS    Make the output image 2^STOPS times brighter
           -STOPS    Make the output image 2^STOPS times dimmer
           *SCALE    Make the output image SCALE times brighter
           /SCALE    Make the output image SCALE times dimmer

           ^POWER    Raise each output pixel to the POWER power; this
                     modifies the contrast of the output.  Use a
                     positive value of POWER for higher contrast, and
                     a negative value of POWER for lower contrast.
           
        Brightness and contrast modifications may be combined, e.g.,
        "+4^2" first multiplies each output pixel by 2^4 (16), and
        then raises the result to the 2nd power.  Note that when used
        together, there's a great deal of interaction between these
        settings, so it may be necessary to adjust one to compensate
        for the effect of the other (e.g., 

        Increase or decrease exposure by STOPS f-stops

    -F FILTER[/PARAM=VAL...]
    --filter=FILTER[/PARAM=VAL...]

        Set the filter used for the output image to FILTER, and
        optionally change some filter parameters.

        Possible values of FILTER include "mitchell", "gauss", and "box"
        (default "mitchell").

        The set of filter parameters vary depending on the filter, but
        some include:

           "width"  -- the width of the filter, used by most filters
           "a", "b" -- parameters for the "mitchell" filter
           "alpha"  -- parameter for the "gauss" filter

    -c COMMANDS
    --camera=COMMANDS

        Move/point or perform other camera actions according to the
        commands in the string COMMANDS.  COMMANDS is a comma-separated
        list of simple one-or-two-letter commands.

        Camera commands include (spaces are used for clarity, and may be
        omitted in use):

            g X,Y,Z     Goto absolute location X, Y, Z
            t X,Y,Z     Point at target X, Y, Z
            mDIR DIST   Move DIST units in DIR direction
                        DIR can be one of l, r, u, d, f, b, x, y, z for
                        left, right, up, down, forward, back, or along
                        one of the x/y/z axes
            rDIR ANGLE  Rotate ANGLE degrees in DIR direction
                        DIR can be one of l, r, u, d, x, y, z for left,
                        right, up, down, around camera axis, or along
                        one of the x/y/z axes
            oAXIS ANGLE "Orbit" ANGLE degrees around the AXIS (x, y, z) axis
            z FACTOR    Zoom by FACTOR amount
            l FOC_LEN   Set lens focal-length to FOC_LEN
            f F_STOP    Set lens aperture to F_STOP
            d DIST      Set focus distance to DIST
            a X,Y       Auto-focus at point X,Y on the output image
                        X and Y are fractions of output image's x or y
                        dimension, and have a range of 0 to 1; Y starts
                        from the _bottom_ of the image
            u SIZE      Set scene unit to SIZE, in mm
            h           Set camera orientation to horizontal
            v           Set camera orientation to vertical

        E.g., -coy20,mf5,z2 has the following commands:

           "oy20" means "orbit around y-axis 20 degrees"
           "mf5"  means "move forward by 5 scene units"
           "z2"   means "zoom in by a factor of 2"

        Note that command-line camera commands are applied after the
        camera has been set up by the scene input file.  Also, all
        changes are made in order.  For instance, if the "u" command is
        used to change the size of the scene unit, distances in
        subsequent commands will use that unit; also, the auto-focus
        command

    -A ALPHA
    --background-alpha=ALPHA
        
        Use ALPHA as the opacity of the background.

        This may be used to produce output images with a "transparent"
        background (for use as icons or whatever).  Whenever a
        camera-ray does not hit any object in the scene, and the
        background is black, ALPHA is used as the alpha value
        (opacity) of that pixel.

    -R OPTIONS
    --render-options=OPTIONS

        Set rendering options, where OPTIONS is a comma-separated list
        of NAME=VALUE pairs.  The supported rendering options vary
        depending on the surface-integrator used, but some are:

           min-trace=DIST 

              Set the minimum tracing distance to DIST.

        Options understood by the "path" surface-integrator:

           min-path-len=LEN

              The number of surface intersections which will always
              be traced without trying to terminate the path using
              russian-roulette.  (default 5)

           rr-term-prob=PROB

              For paths over the minimum path-length, the probability
              that a path will be terminated at each new intersection.
              (default 0.5)

    -L X,Y+W,H
    --limit=X,Y+W,H

	Limit output to the rectangle with upper-left and lower-right
	corners X,Y and X+W,Y+H within the "nominal" output image (the
	output image without -L/--limit).  [See next entry for details.]

    -L X1,Y1-X2,Y2
    --limit=X1,Y1-X2,Y2

	Limit output to the rectangle with upper-left and lower-right
	corners X1,Y1 and X2,Y2 within the "nominal" output image (the
	output image without -L/--limit).

	All limit parameters (X,Y,W,H,X1,Y1,X2,Y2) can be percentages
	(with "%") or fractions (with ".")  of the "nominal" output
	image, or integer numbers of pixels.

	Note that the -s/--size option always specifies the size of
	the nominal image, so if -L/--limit is used, the actual output
	image will be smaller than what is specified with -s/--size.

	Example:

	   --limit=.25,.25+.5,.5
	   --limit=25%,25%+50%,50%

	   --limit=.25,.25-.75,.75
	   --limit=25%,25%-75%,75%

	      All of these are equivalent, and limit output to the
	      center 1/4 of the nominal ouput image.

	   --limit=0.5,0+8,10

	      Output a 8x10 pixel area starting at the center point of
	      the image in the X-dimension, and the top of the image
	      in the Y dimension.

    -q
    --quiet

        Do not output informational or progress messages

    -P
    --no-progress

        Do not display a progress indicator

    -p
    --progress

      Output progress indicator despite --quiet
